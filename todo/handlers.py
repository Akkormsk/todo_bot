import sqlite3
from aiogram import types, Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from database import add_task, get_tasks, get_archive, toggle_task_completion, clear_archive_db

router = Router()


@router.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–≤–æ–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª. –î–æ–±–∞–≤—å –∑–∞–¥–∞—á—É —Å –ø–æ–º–æ—â—å—é /add <—Ç–µ–∫—Å—Ç>.")


@router.message(Command("add"))
async def add(message: types.Message):
    task_text = message.text[5:].strip()
    if task_text:
        add_task(task_text)
        await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task_text}")
        await show_tasks(message)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    else:
        await message.answer("‚ùå –ù–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add")


@router.message(Command("tasks"))
async def show_tasks(message: types.Message):
    tasks = get_tasks()
    if not tasks:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for task_id, description, completed in tasks:
        button = InlineKeyboardButton(text=f"\u200B{description}", callback_data=f"task_{task_id}")
        keyboard.inline_keyboard.append([button])

    await message.answer("üìå –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:", reply_markup=keyboard)


@router.callback_query(lambda c: c.data.startswith("task_"))
async def toggle_task(callback_query: types.CallbackQuery):
    task_id = int(callback_query.data.split("_")[1])
    toggle_task_completion(task_id)  # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    tasks = get_tasks()

    if not tasks:
        await callback_query.message.edit_text("üì≠ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –∞—Ä—Ö–∏–≤.")
        return

    # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"\u200B{task[1]}",
            callback_data=f"task_{task[0]}"
        )] for task in tasks
    ])

    await callback_query.message.edit_text("üìå –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:", reply_markup=keyboard)
    await callback_query.answer("–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")


@router.message(Command("archive"))
async def show_archive(message: types.Message):
    archive = get_archive()
    if archive:
        archive_text = "\n".join([task[0] for task in archive])
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∞—Ä—Ö–∏–≤", callback_data="clear_archive")]
        ])
        await message.answer(f"üìú –ê—Ä—Ö–∏–≤:\n{archive_text}", reply_markup=keyboard)
    else:
        await message.answer("üì≠ –ê—Ä—Ö–∏–≤ –ø—É—Å—Ç.")


@router.callback_query(lambda c: c.data == "clear_archive")
async def clear_archive(callback_query: types.CallbackQuery):
    clear_archive_db()
    await callback_query.message.edit_text("üì≠ –ê—Ä—Ö–∏–≤ –æ—á–∏—â–µ–Ω.")
    await callback_query.answer("–ê—Ä—Ö–∏–≤ —É–¥–∞–ª—ë–Ω!")


@router.message(Command("help"))
async def help_command(message: types.Message):
    text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/add - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/tasks - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏\n"
        "/archive - –ü–æ–∫–∞–∑–∞—Ç—å –∞—Ä—Ö–∏–≤ –∑–∞–¥–∞—á\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ 2"
    )
    await message.answer(text)


@router.message()
async def add_task_from_text(message: types.Message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã."""
    task_text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ (–Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "/")
    if not task_text.startswith("/"):
        add_task(task_text)
        await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task_text}")
        await show_tasks(message)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á